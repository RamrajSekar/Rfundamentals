FUN = function(x) mean(x, na.rm = TRUE)),dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),labels = c(0, 1))
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
install.packages("caTools")
myobj = 5:10
print(myobj)
myobj
plot(myobj)
set.seed(65)
myobj = 5:10
set.seed(65)
print(set.seed(65))
print(set.seed(65))
runif(n = 9, min = 3, max = 6)
print(set.seed(65))
set.seed(65)
runif(n = 9, min = 3, max = 6)
runif(9,3,6)
runif(min = 3, max = 6, n = 9)
runif(3)
runif(3,,4)
runif(3,,4)
source('C:/MachineLearning/LearnR/RandomNumb.R')
setwd("C:/MachineLearning/LearnR")
source('C:/MachineLearning/LearnR/RandomNumb.R')
paste("xyz", 1:10)
seq() # just using the default settings
seq() # just using the default settings
seq(1,4)
seq(11,4)
paste(1:4)
source('C:/MachineLearning/LearnR/RandomNumb.R')
class(paste(1:4)) # checking the class
source('C:/MachineLearning/LearnR/RandomNumb.R')
paste("xyz", c(2,5,7,"test", 4.5))
paste("xyz", 1:10, sep = "") # modifying the seperator
seq(from = 3, length = 3)
seq(from = 3, length = 3, by = 0.5)
seq(from = 3, by = 0.5, length = 3) # changed order
?rep # next function
rep(c(3,4,5), 3)
rep(x, each = 3) # using each
x = c(1,2,3)
rep(x, each = 3) # using each
rep(x, each = 3, times = 3) # combining arguments
y = 4:20 # our data
which(y == 10)
y[1]
y[3]
sum(myobj)
plot(myobj)
myobj
sum(myobj)
paste("R is great", c(4,7,45),"and I love it")
paste("R is great", c(4,7,45),"and I will love it")
paste("R is great", c(4,7,45),"and I will love it",sep = "")
paste("R is great", c(4,7,45),"and I will love it",sep = " ")
rep(x,length=31)
x
x[7]
x = rep(x,length=31)
x
x[7]
myfunc <- function(X){X+X}
myfunc(10)
mysecfunc(5,9)
mysecfunc(t,z)
mysecfunc(t,z)
mysecfunc(5,8)
mysecfunc <- function(t,z){
value = z*3
value = value*t
print(value)
}
mysecfunc(5,8)
{
print (i)
}
for (i in 1:15)
{
print (i)
}
for(z in 2:6)
print(z)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
}
}
pr(5)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
s
}
}
pr(5)
pr(1)
else
{
print('The value of ',n, 'is lesser than 2')
}
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
s
}
else
{
print('The value of ',n, 'is lesser than 2')
}
}
pr(1)
pr(1)
pr(1)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
s
}
else
{
paste('The value of '+n+ 'is lesser than 2')
}
}
pr(1)
paste('The value of ',n, 'is lesser than 2')
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
s
}
else
{
print('The value of n is lesser than 2')
}
}
pr(1)
pr(5)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
paste("The value of n is: ",s)
}
else
{
print('The value of n is lesser than 2')
}
}
pr(5)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
paste("The value of n is: ",s)
p = c()
for (i in seq(2,n))
{
# we use any to check that i (of this loop round) is still in s, multiples of i
#will be removed
if(any(s==i))
{
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
}
}
}
else
{
print('The value of n is lesser than 2')
}
}
pr(5)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
paste("The value of n is: ",s)
p = c()
for (i in seq(2,n))
{
# we use any to check that i (of this loop round) is still in s, multiples of i
#will be removed
if(any(s==i))
{
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
s
}
}
}
else
{
print('The value of n is lesser than 2')
}
}
pr(5)
## Loops - loops and functions are a crucial part in programming
# FOR loops allow a certain operation to be repeated a fixed nr of times
# This is opposed to the While loop where the rep nr is not prefixed
# The syntax looks like this: for (name in vector) {commands}
for (i in 1:15)
{
print (i)
}
for(z in 2:6)
{
print(z)
}
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
paste("The value of n is: ",s)
p = c()
for (i in seq(2,n))
{
# we use any to check that i (of this loop round) is still in s, multiples of i
#will be removed
if(any(s==i))
{
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
print(s)
}
}
}
else
{
print('The value of n is lesser than 2')
}
}
pr(5)
pr(1)
pr = function(n)
{
if(n>=2)
{
s =seq(2,n)
paste("The value of n is: ",s)
p = c()
for (i in seq(2,n))
{
# we use any to check that i (of this loop round) is still in s, multiples of i
#will be removed
if(any(s==i))
{
# we store i if it meets our criteria in p together with the previous p
p = c(p,i)
# to search for numbers with a remainder at modulus division
s = c(s[(s%%i) != 0],i)
print(s)
}
}
}
else
{
stop("Input at least 2")
print('The value of n is lesser than 2')
}
}
pr(1)
pr(1)
pr(5)
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
plot(x,y)
x=5:7
y = 8:10
plot(x,y)
plot(lynx)
plot(lynx, main="Lynx Trappings", col="red",
col.main=52, cex.main=1.5)
plot(lynx, main="Lynx Trappings", col="red",col.main=52, cex.main=1.5)
plot(lynx, ylab="Lynx Trappings", xlab="")
plot(lynx, ylab="Lynx Trappings", xlab="", las=2)
par(mfrow=c(2,2), col.axis="red")
plot(par(mfrow=c(2,2), col.axis="red"))
plot(par(mfrow=c(2,2), col.axis="red"))
par(mfrow=c(2,2), col.axis="red")
plot(1:8, las=0, xlab="xlab", ylab="ylab", main="LAS = 0")
plot(1:8, las=1, xlab="xlab", ylab="ylab", main="LAS = 1")
plot(1:8, las=2, xlab="xlab", ylab="ylab", main="LAS = 2")
plot(1:8, las=3, xlab="xlab", ylab="ylab", main="LAS = 3")
?plot
plot(lynx) # plot for time series data
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="b", main="Type c") # lines only of b
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="b", main="Type c") # lines only of b
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
par(mar=c(4,3,3,3), col.axis="darkgreen") # change of plot margins
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="Speed")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="Speed")
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="Speed")
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="Speed")
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="Speed")
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="Speed",main = "Car Speed")
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="ylab",main = "Car Speed")
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="ylab",main = "Car Speed")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="Speed",main = "Car Speed")
plot(cars$speed, type="s", col="red", xlab="Cars ID", ylab="Speed",main = "Car Speed")
text(8, 14, "Speed in mph", cex=0.85, col="red") # adding the explanatory text to plot 1
par(new=T) # allows 2 in 1 plot
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4, col = "darkblue") # y axis for plot 2
text(37, 18, "Stopping distance in ft", cex=0.85, col="darkblue") # explanations to plot 2
title(main="Speed and Stopping\n Distances of Cars") # main title
#??? graphical parameters
?par
par()
rivers = 1:41
y = rivers
plot(y, xlab="index",ylab="river")
x = 1:41
y = rivers
plot(x,y, xlab="index",ylab="length in miles")
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
plot(x,y, xlab="index",ylab="length in miles", main = "Length of n.american rivers",
col.main="orange")
plot(x,y, xlab="index",ylab="length in miles", main = "Length of n.american rivers",
col.main="orange",pch = 20)
f <- function(x)
{
y <- 2
y ^ 2 + g(x)
}
g <- function(x)
{
x * y
}
f(6)
f <- function(x)
{
y <- 2
y ^ 2 + g(x)
}
f(6)
f(6)
f(6)
f(16)
f <- function(x)
{
y <- 2
y ^ 2 + g(x)
}
f(16)
f(2)
y(2)
h(2)
end(f)
f <- function(x)
{
y <- 2
y ^ 2 + g(x)
}
f(2)
f(1)
f <- function(x)
{
y <- 2
y ^ 2
}
f(1)
f <- function(x)
{
y <- 2
y ^ 2 * x
}
f(1)
f(4)
f(4)
f <- function(x)
{
y <- 2
y ^ 2 * a(x)
}
f(4)
View(g)
rm(g)
f <- function(x)
{
y <- 2
y ^ 2 * g(x)
}
f(4)
g <- function(x)
{
x * y
}
f(2)
g <- function(x)
{
x * a
}
f(2)
f <- function(x)
{
y <- 2
y ^ 2 * g(x)
}
g <- function(x)
{
x * a
}
f(2)
f <- function(x)
{
y <- 2
y ^ 2 * g(x)
}
g <- function(x)
{
x * a
}
f(2)
a<-3
f <- function(x)
{
a <- 2
a ^ 2 * g(x)
}
g <- function(x)
{
x * a
}
f(2)
f(6)
f(6)
f <- function(x)
{
a <- 2
a ^ 2 + g(x)
}
f(6)
a <- c(1,1,1,1,2,2,2,2,2)
rm(a)
a <- c(1,1,1,1,2,2,2,2,2)
b <- c(10,12,15,12,NA,30,42,38,40)
c <- split(b,a)
c
c <- split(a,b)
c
c
c <- split(b,a)
c
lapply(c,mean)
lapply(c,mean,na.rm = TRUE)
t(c)
rbind(a,b)
l(c(1))
l(c(l))
length(4)
seq_along(4)
seq_along(a)
seq(a)
